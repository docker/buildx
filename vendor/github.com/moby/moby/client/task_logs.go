package client

import (
	"context"
	"io"
	"net/url"
	"sync"
	"time"

	"github.com/moby/moby/client/internal/timestamp"
)

// TaskLogsOptions holds parameters to filter logs with.
type TaskLogsOptions struct {
	ShowStdout bool
	ShowStderr bool
	Since      string
	Until      string
	Timestamps bool
	Follow     bool
	Tail       string
	Details    bool
}

// TaskLogsResult holds the result of a task logs operation.
// It implements [io.ReadCloser].
type TaskLogsResult struct {
	rc    io.ReadCloser
	close func() error
}

// TaskLogs returns the logs generated by a task.
// It's up to the caller to close the stream.
func (cli *Client) TaskLogs(ctx context.Context, taskID string, options TaskLogsOptions) (TaskLogsResult, error) {
	query := url.Values{}
	if options.ShowStdout {
		query.Set("stdout", "1")
	}

	if options.ShowStderr {
		query.Set("stderr", "1")
	}

	if options.Since != "" {
		ts, err := timestamp.GetTimestamp(options.Since, time.Now())
		if err != nil {
			return TaskLogsResult{}, err
		}
		query.Set("since", ts)
	}

	if options.Timestamps {
		query.Set("timestamps", "1")
	}

	if options.Details {
		query.Set("details", "1")
	}

	if options.Follow {
		query.Set("follow", "1")
	}
	query.Set("tail", options.Tail)

	resp, err := cli.get(ctx, "/tasks/"+taskID+"/logs", query, nil)
	if err != nil {
		return TaskLogsResult{}, err
	}
	return newTaskLogsResult(resp.Body), nil
}

func newTaskLogsResult(rc io.ReadCloser) TaskLogsResult {
	if rc == nil {
		panic("nil io.ReadCloser")
	}
	return TaskLogsResult{
		rc:    rc,
		close: sync.OnceValue(rc.Close),
	}
}

// Read implements [io.ReadCloser] for LogsResult.
func (r TaskLogsResult) Read(p []byte) (n int, err error) {
	if r.rc == nil {
		return 0, io.EOF
	}
	return r.rc.Read(p)
}

// Close implements [io.ReadCloser] for LogsResult.
func (r TaskLogsResult) Close() error {
	if r.close == nil {
		return nil
	}
	return r.close()
}
